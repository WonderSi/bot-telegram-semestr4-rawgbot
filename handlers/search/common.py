from aiogram.types import Message
from keyboards import get_back_button, get_game_menu
from services.rawg_games import RAWGGamesService
from logger_config import log_info, log_error, log_bot, log_user

rawg_client = RAWGGamesService()

async def search_games(message: Message, query: str, index: int = 0, search_type: str = 'name', original_user_id=None, original_username=None):
    user_id = original_user_id or message.from_user.id
    username = original_username or message.from_user.username
    
    if index == 0:
        search_msg = await message.answer("üîç –ò—â—É –∏–≥—Ä—ã...")
        log_info(f"–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –∏–≥—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}', —Ç–∏–ø: {search_type}")
    else:
        log_info(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}', –∏–Ω–¥–µ–∫—Å: {index}")
    
    try:
        games = await rawg_client.search_games(query, limit=10, search_type=search_type)
        
        if not games or index >= len(games):
            if index == 0:
                search_text = ""
                if search_type == 'name':
                    search_text = f"–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é '{query}'"
                elif search_type == 'genre':
                    search_text = f"–ø–æ –∂–∞–Ω—Ä—É '{query}'"
                elif search_type == 'tag':
                    search_text = f"–ø–æ —Ç–µ–≥—É '{query}'"
                
                no_results = f"üòî –ò–≥—Ä—ã {search_text} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                
                log_info(f"–ü–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: '{query}', —Ç–∏–ø: {search_type}")
                
                if hasattr(search_msg, 'edit_text'):
                    await search_msg.edit_text(no_results, reply_markup=get_back_button())
                else:
                    await message.answer(no_results, reply_markup=get_back_button())
                
                log_bot(user_id, no_results)
            else:
                end_msg = "üîö –ë–æ–ª—å—à–µ –∏–≥—Ä –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                log_info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}', –∏–Ω–¥–µ–∫—Å: {index}")
                await message.answer(
                    end_msg,
                    reply_markup=get_back_button()
                )
                log_bot(user_id, end_msg)
            return

        if index == 0 and hasattr(search_msg, 'delete'):
            await search_msg.delete()

        game = games[index]
        
        name = game.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
        rating = game.get('rating', 'N/A')
        released = game.get('released', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        platforms = [platform['platform']['name'] for platform in game.get('platforms', [])]
        platforms_text = ', '.join(platforms[:3])
        if len(platforms) > 3:
            platforms_text += f" –∏ –µ—â–µ {len(platforms)-3}"
            
        tags = []
        for tag in game.get('tags', [])[:3]:
            tags.append(tag.get('name', ''))
        tags_text = ', '.join(tags) if tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'
        
        image_url = game.get('background_image')
        game_id = game.get('id')
 
        log_info(f"–ü–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–∞–ª {len(games)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: '{query}', —Ç–∏–ø: {search_type}")
        log_user(user_id, username, f"–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–≥—Ä—É '{name}' (ID: {game_id}), —Ä–µ–∑—É–ª—å—Ç–∞—Ç {index + 1} –∏–∑ {len(games)}")

        result_text = (
            f"**{name}**\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/5\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {released}\n"
            f"üéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_text}\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n\n"
            f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç {index + 1} –∏–∑ {len(games)}"
        )

        try:
            if image_url:
                await message.answer_photo(
                    photo=image_url,
                    caption=result_text,
                    reply_markup=get_game_menu(game_id, query, index, len(games), search_type),
                    parse_mode='Markdown'
                )
                log_bot(user_id, result_text)
            else:
                await message.answer(
                    text=result_text,
                    reply_markup=get_game_menu(game_id, query, index, len(games), search_type),
                    parse_mode='Markdown'
                )
                log_bot(user_id, result_text)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä—ã {name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            await message.answer(
                text=result_text,
                reply_markup=get_game_menu(game_id, query, index, len(games), search_type),
                parse_mode='Markdown'
            )
            log_bot(user_id, result_text)

    except Exception as e:
        error_text = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}', —Ç–∏–ø '{search_type}' - {str(e)}")
        await message.answer(error_text, reply_markup=get_back_button())
        log_bot(user_id, error_text) 
