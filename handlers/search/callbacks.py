from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards import get_back_button
from handlers.search.states import SearchStates
from keyboards import get_search_type_menu
from logger_config import log_user, log_bot, log_info, log_error

router = Router()

@router.callback_query(F.data == "search_games")
async def search_games_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    log_user(user_id, username, "–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫ –∏–≥—Ä'")

    prompt_text = "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"

    try:
        await callback.message.delete()
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
    
    await callback.message.answer(prompt_text, reply_markup=get_search_type_menu())
    log_bot(user_id, prompt_text)

@router.callback_query(F.data == "search_by_name")
async def search_by_name_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    log_user(user_id, username, "–í—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")

    prompt_text = "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:"

    try:
        await callback.message.delete()
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
    
    await callback.message.answer(prompt_text, reply_markup=get_back_button())
    log_bot(user_id, prompt_text)
    
    await state.set_state(SearchStates.waiting_for_game_name)
    log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã")

@router.callback_query(F.data == "search_by_genre")
async def search_by_genre_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    log_user(user_id, username, "–í—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É")

    prompt_text = (
        "üé≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∂–∞–Ω—Ä–æ–≤: action, adventure, rpg, strategy, shooter, racing, puzzle, sports, platformer"
    )

    try:
        await callback.message.delete()
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

    await callback.message.answer(prompt_text, reply_markup=get_back_button())
    log_bot(user_id, prompt_text)
    
    await state.set_state(SearchStates.waiting_for_genre)
    log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∂–∞–Ω—Ä–∞")

@router.callback_query(F.data == "search_by_tag")
async def search_by_tag_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    log_user(user_id, username, "–í—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É")

    prompt_text = (
        "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤: multiplayer, singleplayer, open-world, fps, sci-fi, fantasy"
    )

    try:
        await callback.message.delete()
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
    
    await callback.message.answer(prompt_text, reply_markup=get_back_button())
    log_bot(user_id, prompt_text)
    
    await state.set_state(SearchStates.waiting_for_tag)
    log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–≥–∞") 
