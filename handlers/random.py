from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from keyboards import get_random_game_menu, get_back_button
from services.rawg_games import RAWGGamesService
from logger_config import log_user, log_bot, log_info, log_error

router = Router()
rawg_client = RAWGGamesService()

last_random_game = None

@router.message(Command("random"))
async def random_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    log_user(user_id, username, "–í—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /random")
    
    loading_message = await message.answer("üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
    log_bot(user_id, "üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
    
    await show_random_game(loading_message, original_user_id=user_id, username=username)
    
@router.callback_query(F.data == "random_game")
async def random_game_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    log_user(user_id, username, "–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞'")
    
    await callback.answer("–ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
    
    try:
        await callback.message.delete()
        loading_message = await callback.message.answer("üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
        log_bot(user_id, "üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
        await show_random_game(loading_message, original_user_id=user_id, username=username)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await show_random_game(callback.message, original_user_id=user_id, username=username)

@router.callback_query(F.data == "back_to_random")
async def back_to_random_callback(callback: CallbackQuery):
    global last_random_game
    
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    log_user(user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä–µ")
    
    try:
        await callback.message.delete()
        
        if last_random_game:
            log_info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await show_random_game_from_data(callback.message, last_random_game, original_user_id=user_id, username=username)
        else:
            log_info(f"–ö—ç—à –ø—É—Å—Ç, –∏—â–µ–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            loading_message = await callback.message.answer("üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
            log_bot(user_id, "üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É...")
            await show_random_game(loading_message, original_user_id=user_id, username=username)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–≥—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É.",
            reply_markup=get_back_button()
        )
        log_bot(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–≥—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É.")

async def show_random_game_from_data(message, game, original_user_id=None, username=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = original_user_id or (message.from_user.id if hasattr(message, 'from_user') else None)
    
    try:
        name = game.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
        rating = game.get('rating', 'N/A')
        released = game.get('released', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        platforms = [platform['platform']['name'] for platform in game.get('platforms', [])]
        platforms_text = ', '.join(platforms[:3])
        if len(platforms) > 3:
            platforms_text += f" –∏ –µ—â–µ {len(platforms)-3}"
            
        tags = []
        for tag in game.get('tags', [])[:3]:
            tags.append(tag.get('name', ''))
        tags_text = ', '.join(tags) if tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'
        
        image_url = game.get('background_image')
        game_id = game.get('id')
        
        result_text = (
            f"üé≤ **{name}**\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/5\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {released}\n"
            f"üéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_text}\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n"
        )
        
        if user_id:
            log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É '{name}' (ID: {game_id})")
            if username:
                log_user(user_id, username, f"–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É '{name}'")
        
        if image_url:
            await message.answer_photo(
                photo=image_url,
                caption=result_text,
                reply_markup=get_random_game_menu(game_id),
                parse_mode='Markdown'
            )
        else:
            await message.answer(
                result_text,
                reply_markup=get_random_game_menu(game_id),
                parse_mode='Markdown'
            )
            
        if user_id:
            log_bot(user_id, f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞: {name}")
    except Exception as e:
        if user_id:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É.",
            reply_markup=get_back_button()
        )
        if user_id:
            log_bot(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É.")

async def show_random_game(message, original_user_id=None, username=None):
    global last_random_game
    
    user_id = original_user_id or message.from_user.id
    
    try:
        if user_id:
            log_info(f"–ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if username:
                log_user(user_id, username, f"–ó–∞–ø—Ä–æ—Å–∏–ª —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É")
            
        game = await rawg_client.get_random_game()
        
        if not game:
            error_text = "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            if user_id:
                log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if hasattr(message, 'edit_text'):
                await message.edit_text(error_text, reply_markup=get_back_button())
            else:
                await message.answer(error_text, reply_markup=get_back_button())
                
            if user_id:
                log_bot(user_id, error_text)
            return
        
        last_random_game = game
        
        if user_id:
            log_info(f"–ù–∞–π–¥–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ '{game.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if hasattr(message, 'delete'):
            await message.delete()
        
        await show_random_game_from_data(message, game, original_user_id=user_id, username=username)
                
    except Exception as e:
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        if user_id:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(error_text, reply_markup=get_back_button())
        else:
            await message.answer(error_text, reply_markup=get_back_button()) 
            
        if user_id:
            log_bot(user_id, error_text) 
