from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards import get_back_button, get_detail_search_menu, get_detail_popular_menu, get_detail_random_menu
from services.rawg_games import RAWGGamesService
from logger_config import log_user, log_bot, log_info, log_error

router = Router()
rawg_client = RAWGGamesService()


@router.callback_query(F.data.startswith("details_") & ~F.data.startswith("details_popular_") & ~F.data.startswith("details_random_"))
async def details_search_game_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username

    try:
        game_id = int(callback.data.split("_")[1])

        log_user(user_id, username,
                 f"–ó–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã —Å ID {game_id} (–∏–∑ –ø–æ–∏—Å–∫–∞)")
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        try:
            await callback.message.delete()
        except Exception as e:
            log_error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            pass

        await show_game_details(callback, game_id, "search", original_user_id=user_id, username=username)
    except Exception as e:
        log_error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã (–∏–∑ –ø–æ–∏—Å–∫–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ",
            reply_markup=get_back_button()
        )
        log_bot(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ")


@router.callback_query(F.data.startswith("details_popular_"))
async def details_popular_game_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username

    try:
        game_id = int(callback.data.split("_")[2])

        log_user(user_id, username,
                 f"–ó–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã —Å ID {game_id} (–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)")
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        try:
            await callback.message.delete()
        except Exception as e:
            log_error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            pass

        await show_game_details(callback, game_id, "popular", original_user_id=user_id, username=username)
    except Exception as e:
        log_error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã (–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ",
            reply_markup=get_back_button()
        )
        log_bot(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ")


@router.callback_query(F.data.startswith("details_random_"))
async def details_random_game_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username

    try:
        game_id = int(callback.data.split("_")[2])

        log_user(user_id, username,
                 f"–ó–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã —Å ID {game_id} (–∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö)")
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        try:
            await callback.message.delete()
        except Exception as e:
            log_error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            pass

        await show_game_details(callback, game_id, "random", original_user_id=user_id, username=username)
    except Exception as e:
        log_error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã (–∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ",
            reply_markup=get_back_button()
        )
        log_bot(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ")


async def show_game_details(callback: CallbackQuery, game_id: int, source_type: str, original_user_id=None, username=None):
    user_id = original_user_id or callback.from_user.id
    current_username = username or callback.from_user.username

    try:
        log_info(
            f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã {game_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ç–∏–ø: {source_type})")
        log_user(user_id, current_username,
                 f"–ó–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã (ID: {game_id})")

        game_details = await rawg_client.get_game_details(game_id)

        if not game_details:
            log_error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ {game_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ",
                reply_markup=get_back_button()
            )

            log_bot(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ")
            return

        name = game_details.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
        description_raw = game_details.get(
            'description_raw', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        description = description_raw[:500] + \
            "..." if len(description_raw) > 500 else description_raw
        rating = game_details.get('rating', 'N/A')
        metacritic = game_details.get('metacritic', 'N/A')
        released = game_details.get('released', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        genres = [genre['name'] for genre in game_details.get('genres', [])]
        genres_text = ', '.join(genres[:3]) if genres else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'

        tags = [tag['name'] for tag in game_details.get('tags', [])[:5]]
        tags_text = ', '.join(tags) if tags else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'

        log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã '{name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        detailed_text = (
            f"üéÆ **{name}**\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/5\n"
            f"üèÜ Metacritic: {metacritic}\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {released}\n"
            f"üéØ –ñ–∞–Ω—Ä—ã: {genres_text}\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{description}"
        )

        if source_type == "search":
            reply_markup = get_detail_search_menu()
        elif source_type == "popular":
            reply_markup = get_detail_popular_menu()
        elif source_type == "random":
            reply_markup = get_detail_random_menu()
        else:
            reply_markup = get_back_button()

        image_url = game_details.get('background_image')

        if image_url:
            await callback.message.answer_photo(
                photo=image_url,
                caption=detailed_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await callback.message.answer(
                detailed_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

        log_bot(user_id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã: {name}")

    except Exception as e:
        log_error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã {game_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ",
            reply_markup=get_back_button()
        )

        log_bot(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ")
